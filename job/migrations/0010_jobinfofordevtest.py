# Generated by Django 4.1.3 on 2022-11-30 03:21

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('job', '0009_alter_job_has_file_type'),
    ]

    operations = [
        migrations.CreateModel(
            name='JobInfoForDevTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_odb', models.FileField(blank=True, help_text='整理好的ODB++资料,确认过是对的', null=True, upload_to='files', verbose_name='整理好的ODB++资料')),
                ('has_step_multi', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('orig', 'orig'), ('net', 'net'), ('pre', 'pre'), ('pcs', 'pcs'), ('set', 'set'), ('panel', 'panel')], max_length=200, null=True, verbose_name='包含step')),
                ('job_type_1', models.CharField(blank=True, choices=[('through_hole', '通孔板'), ('non_through_hole', '非通孔板'), ('else', '其它')], default='else', help_text='料号的类型-维度1', max_length=20, null=True, verbose_name='料号类型-维度1')),
                ('job_type_2', models.CharField(blank=True, choices=[('rigid', '硬板'), ('flex', '软板'), ('rigid_flex', '软硬结合板'), ('else', '其它')], default='else', help_text='料号的类型-维度2', max_length=20, null=True, verbose_name='料号类型-维度2')),
                ('job_type_3', models.CharField(blank=True, choices=[('ic', 'IC载板'), ('led', 'LED灯板'), ('car', '汽车板'), ('server', '服务器板'), ('else', '其它')], default='else', help_text='料号的类型-维度3', max_length=20, null=True, verbose_name='料号类型-维度3')),
                ('pcsSize', models.FloatField(blank=True, help_text='pcs的profile线外接正矩形的对角线长度(单位:inch)', null=True, verbose_name='pcs对角线尺寸')),
                ('matrixRowNum', models.IntegerField(blank=True, help_text='所有层数(包括任意层)', null=True, validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(0)], verbose_name='所有层数')),
                ('totalFeatureNum', models.IntegerField(blank=True, help_text='总物件数', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='总物件数')),
                ('copperLayerNum', models.IntegerField(blank=True, help_text='信号层数量(含地电层)', null=True, validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(0)], verbose_name='信号层数')),
                ('pgLayerNum', models.IntegerField(blank=True, help_text='地电层数量', null=True, validators=[django.core.validators.MaxValueValidator(1000), django.core.validators.MinValueValidator(0)], verbose_name='地电层数')),
                ('hasPGlayer', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='是否有地电层(负片层)', max_length=10, verbose_name='是否有地电层(负片层)')),
                ('linedCopper', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='线路层是否为线铜', max_length=10, verbose_name='线路层是否为线铜')),
                ('bgaNumTop', models.IntegerField(blank=True, help_text='正面BGA总数', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='正面BGA总数')),
                ('bgaNumBottom', models.IntegerField(blank=True, help_text='背面BGA总数', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='背面BGA总数')),
                ('bgaNum', models.IntegerField(blank=True, help_text='BGA总数', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='BGA总数')),
                ('impLineNum', models.IntegerField(blank=True, help_text='阻抗线数', null=True, validators=[django.core.validators.MaxValueValidator(100000), django.core.validators.MinValueValidator(0)], verbose_name='阻抗线数')),
                ('minLineWidth4outerTop', models.FloatField(blank=True, help_text='正面外层的最小线宽(单位:mil)', null=True, verbose_name='正面外层最小线宽')),
                ('minLineSpace4outerTop', models.FloatField(blank=True, help_text='正面外层的最小线距(单位:mil)', null=True, verbose_name='正面外层最小线距')),
                ('minLineWidth4outerBottom', models.FloatField(blank=True, help_text='背面外层的最小线宽(单位:mil)', null=True, verbose_name='背面外层最小线宽')),
                ('minLineSpace4outerBottom', models.FloatField(blank=True, help_text='背面外层的最小线距(单位:mil)', null=True, verbose_name='背面外层最小线距')),
                ('minLineWidth4outer', models.FloatField(blank=True, help_text='外层的最小线宽(单位:mil)', null=True, verbose_name='外层最小线宽')),
                ('minLineSpace4outer', models.FloatField(blank=True, help_text='外层的最小线距(单位:mil)', null=True, verbose_name='外层最小线距')),
                ('solderWindowNumTop', models.IntegerField(blank=True, help_text='正面防焊层物件数,如果有多层，填写总数）', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='正面防焊层物件数（总数）')),
                ('solderWindowNumBottom', models.IntegerField(blank=True, help_text='底面防焊层物件数,如果有多层，填写总数）', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='底面防焊层物件数（总数）')),
                ('solderMaxWindowNum4singleSide', models.IntegerField(blank=True, help_text='单面最多防焊开窗数量', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='单面最多防焊开窗数量')),
                ('hasSMlayer', models.CharField(choices=[('yes', '是'), ('no', '否'), ('none', 'None')], default='none', help_text='是否有防焊层?', max_length=10, verbose_name='是否有防焊层')),
                ('pcsDrlNum', models.IntegerField(blank=True, help_text='所有孔层的所有孔数量(包括槽孔,镭射孔等)', null=True, validators=[django.core.validators.MaxValueValidator(100000000), django.core.validators.MinValueValidator(0)], verbose_name='pcs所有孔数')),
                ('hdiLevel', models.IntegerField(blank=True, help_text='孔阶数，HDI介数', null=True, validators=[django.core.validators.MaxValueValidator(99), django.core.validators.MinValueValidator(0)], verbose_name='孔阶数')),
                ('usage', models.CharField(blank=True, help_text='料号用途', max_length=200, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='用途')),
                ('impCouponStepName', models.CharField(blank=True, help_text='阻抗测试条的step名', max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='阻抗step')),
                ('routLayerName', models.CharField(blank=True, help_text='rout层的名字', max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=0)], verbose_name='Rout层')),
                ('panelSize', models.FloatField(blank=True, help_text='panel的profile线外接正矩形的对角线长度(单位:inch)', null=True, verbose_name='panel对角线尺寸')),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_job_job_info_for_dev_test', to='job.job', verbose_name='料号名称')),
            ],
        ),
    ]
